#!/usr/bin/env python3
"""
任务协调任务
负责根据当前任务执行情况动态选择下一个要执行的智能体

在分层处理模式（Process.hierarchical）中，该任务由管理者智能体执行，
用于决定下一步应该将任务委托给哪个执行智能体。
"""

class TaskCoordinationTask:
    def __init__(self, llm):
        self.llm = llm
    
    def create_task(self, task_coordination_agent, context=None):
        from crewai import Task
        
        description = """作为任务协调专家，你需要根据当前的工作流程状态和评估结果，决定下一步应该执行哪个智能体。
        分析当前情况并做出决策：
        1. 如果是初始状态，应该启动微生物识别任务
        2. 如果微生物识别已完成，应该启动菌剂设计任务
        3. 如果菌剂设计已完成，应该启动评估任务
        4. 如果评估结果不达标，应该重新启动微生物识别任务
        5. 如果评估结果达标，应该启动方案生成任务
        
        请根据上下文信息做出决策，并明确指出下一步应该执行的任务。
        
        在分层处理模式中，你的决策将指导管理者智能体将任务委托给适当的执行智能体。
        
        重要决策指导原则：
        1. 仔细分析评估任务的输出结果，特别关注核心标准（群落稳定性和结构稳定性）是否达标
        2. 如果评估报告中包含"不达标"、"需要改进"、"未满足标准"等负面评价，
           你应该决定重新执行微生物识别任务
        3. 如果评估报告中包含"达标"、"符合要求"、"通过"等正面评价，
           你应该决定执行方案生成任务
        4. 避免重复执行相同的任务委托，如果需要重新执行任务，应该提供不同的上下文信息
        5. 当多次重新执行同一类型任务仍不达标时，应该提供更具体的改进建议并终止循环
        6. 每次决策都应该基于最新的任务输出和上下文信息"""
        
        expected_output = """明确指出下一步应该执行的任务名称，以及简要说明选择该任务的原因。
        例如："下一步应该执行微生物识别任务，因为这是工作流程的开始阶段。"
        或："下一步应该重新执行微生物识别任务，因为评估结果不达标，需要重新筛选微生物。"
        
        你的输出应该包含以下信息：
        1. 下一步应该执行的任务名称
        2. 选择该任务的具体原因
        3. 如果是基于评估结果的决策，请引用评估报告中的关键信息"""
        
        task = Task(
            description=description,
            expected_output=expected_output,
            agent=task_coordination_agent,
            context=context or []
        )
        
        return task